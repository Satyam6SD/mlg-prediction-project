import pandas as pd

import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/MPG.csv')

df.head()

df.nunique()

df.info()

df.describe()

df.corr()

df = df.dropna()

df.info()

sns.pairplot(df, x_vars = ['displacement', 'horsepower', 'weight', 'acceleration', 'mpg'], y_vars = 'mpg')

sns.regplot(x = 'displacement', y = 'mpg', data = df)

df.columns

y = df['mpg']

y.shape

x = df[['displacement', 'horsepower', 'weight', 'acceleration']]

x.shape

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()

x = ss.fit_transform(x)

pd.DataFrame(x).describe()

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x, y, train_size = 0.7)

xtrain.shape, xtest.shape, ytrain.shape, ytest.shape

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(xtrain, ytrain)

lr.intercept_

lr.coef_

y_pred = lr.predict(xtest)

y_pred

from sklearn.metrics import mean_absolute_error, r2_score, mean_absolute_percentage_error

mean_absolute_error(ytest, y_pred)

mean_absolute_percentage_error(ytest, y_pred)

r2_score(ytest, y_pred)

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree = 2, interaction_only = True, include_bias = False)

x_train2 = poly.fit_transform(xtrain)

x_test2 = poly.fit_transform(xtest)

lr.fit(x_train2, ytrain)

lr.intercept_

lr.coef_

y_pred_poly = lr.predict(x_test2)

mean_absolute_error(ytest, y_pred_poly)

mean_absolute_percentage_error(ytest, y_pred_poly)

r2_score(ytest, y_pred_poly)

